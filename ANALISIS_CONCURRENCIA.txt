1. Identificación de Condiciones de Carrera

Dado que el componente BlueprintsRESTAPI opera en un entorno concurrente, donde múltiples hilos pueden acceder y modificar datos simultáneamente, se identificaron las siguientes condiciones de carrera:

    Acceso concurrente a la colección de blueprints: Múltiples hilos pueden intentar agregar, modificar o eliminar planos simultáneamente, lo que puede generar inconsistencias en los datos.

    Consulta de datos mientras se modifican: Si un hilo está leyendo los blueprints mientras otro los modifica, podrían producirse lecturas inconsistentes.

    Falta de sincronización adecuada en la capa de persistencia: El uso de una estructura de datos no segura para concurrencia podría causar corrupción de datos o comportamiento inesperado.

2. Regiones Críticas Identificadas

Se determinaron las siguientes regiones críticas en el código:

    getAllBlueprints() y getBlueprintsByAuthor(String author): Estas operaciones pueden leer datos inconsistentes si otro hilo está modificando la estructura de datos.

    addNewBlueprint(Blueprint bp): Si varios hilos intentan agregar el mismo plano al mismo tiempo, podrían surgir conflictos.

    updateBlueprint(String author, String bpname, Blueprint nuevoBlueprint): Podría causar modificaciones simultáneas sobre el mismo blueprint sin control de concurrencia.

3. Solución Aplicada

Para resolver las condiciones de carrera sin afectar significativamente el rendimiento, se aplicó la siguiente estrategia:

    Sustitución de Set<Blueprint> por una estructura concurrente

        Se reemplazó el HashMap<Blueprint> por ConcurrentHashMap.newKey() en la implementación de la capa de persistencia (InMemoryBlueprintPersistence).
    private final HashMap<Blueprint> blueprints = ConcurrentHashMap.newKey();

    Esto permite operaciones concurrentes seguras sin necesidad de sincronización manual.

    Eliminación de synchronized en operaciones de lectura

        Los métodos getAllBlueprints() y getBlueprintsByAuthor(String author) fueron optimizados eliminando synchronized, ya que la estructura concurrente garantiza seguridad en lecturas simultáneas.

    Uso de sincronización fina en modificaciones



